APPLICATION SETUP:
First, you need to download Android Studio and Android SDK tools from https://developer.android.com/studio. The green "Download Android Studio" button lets you download the latest stable versions of both of these, so this step is straightforward. Once Android Studio is downloaded, open the "COVID19SURVEY" directory inside this zip file as an Android Studio project. If the gradle build fails and you cannot run the project, simply create a new project and replace the contents of its MainActivity and XML files with that of the "COVID19SURVEY" directory. To prepare a virtual device for the application to run on, make sure that you have PIXEL 2 API 29 available inside the device manager tab of Android Studio and run select it.

APPIUM SETUP:
First, make sure that node.js is available on your PC. Then, install the Appium server using the command 'npm install -g appium' on cmd if you already haven't. This will set up the Appium server. Next, download the Appium client from https://appium.io/ and install it if you already haven't. If this is indeed your first time installing these tools, then use the command 'npm install appium-doctor -g' in order to install appium doctor, which will diagnose and fix common Node, iOS and Android configuration issues before starting Appium.

The next step is to make sure that Appium can connect to your virtual device. For this, first make sure that you have java version 1.8 at the very least. Next, while they should already be installed, make sure that you have 'platform-tools' using the SDK manager of Android Studio. The next step is to set the environment variables accordingly if they have not already been set. First, make sure that you have an ANDROID_HOME variable with its value set to the path of your Android SDK folder. Usually, this will be C:\Users\User\AppData\Local\Android\Sdk. If you go inside this folder, you will also see three folders called tools, build-tools and platform-tools. If not, make sure to install each of them using the SDK manager first. Then, inside Environment Variables, seek 'Path' under the User Variables section, and add three more lines to its value:
%ANDROID_HOME%\tools
%ANDROID_HOME%\platform-tools
%ANDROID_HOME%\build-tools
With these values set, you will now be able to use the command 'adb devices' on cmd. After making sure that this is the case (go back to the previous steps if not and check what you may have done incorrectly), run the survey application in Android Studio using the previously specified virtual device. Then, if it works, you will be able to see it listed under 'List of devices attached' on cmd whenever you use the 'adb devices' command.

Next, make sure that you have the Eclipse IDE installed, and put the "appiumtests" directory inside your Eclipse Workspace as a project folder. It is important that Certain Maven and Selenium tools will be installed inside your project folder, and the pom.xml file should provide that as soon as you open the project and add 'Maven Dependencies' inside your workspace under the project. If not, create a new Maven project inside Eclipse, and replace its pom.xml file and its src files with the ones inside the "appiumtests" directory.

RUNNING TESTS:
With all of these things set up, you should now be able to run each of the five tests. Simply open your virtual device inside Android Studio, Start the Appium Server by opening its client application and click on 'Start Server vX.XX.X'. Then, you can select one of the five scripts inside the src folder of your project in Eclipse and run it to conduct a test. Each of the tests and their purposes are explained in the report. If you encounter an error, make sure that the values of DesiredCapabilities inside the tests correspond to the attributes of your device. If you do not know how to check this, watch from 10:16 to 14:16 this tutorial: https://www.youtube.com/watch?v=N7vY3cPSo8g
